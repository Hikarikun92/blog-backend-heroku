/*
 * This file is generated by jOOQ.
 */
package br.hikarikun92.blogbackendheroku.persistence.jooq.tables.records


import br.hikarikun92.blogbackendheroku.persistence.jooq.tables.Post

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PostRecord() : UpdatableRecordImpl<PostRecord>(Post.POST), Record5<Int?, String?, String?, LocalDateTime?, Int?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var title: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var body: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var publishedDate: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    var userId: Int?
        set(value) = set(4, value)
        get() = get(4) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, String?, String?, LocalDateTime?, Int?> = super.fieldsRow() as Row5<Int?, String?, String?, LocalDateTime?, Int?>
    override fun valuesRow(): Row5<Int?, String?, String?, LocalDateTime?, Int?> = super.valuesRow() as Row5<Int?, String?, String?, LocalDateTime?, Int?>
    override fun field1(): Field<Int?> = Post.POST.ID
    override fun field2(): Field<String?> = Post.POST.TITLE
    override fun field3(): Field<String?> = Post.POST.BODY
    override fun field4(): Field<LocalDateTime?> = Post.POST.PUBLISHED_DATE
    override fun field5(): Field<Int?> = Post.POST.USER_ID
    override fun component1(): Int? = id
    override fun component2(): String? = title
    override fun component3(): String? = body
    override fun component4(): LocalDateTime? = publishedDate
    override fun component5(): Int? = userId
    override fun value1(): Int? = id
    override fun value2(): String? = title
    override fun value3(): String? = body
    override fun value4(): LocalDateTime? = publishedDate
    override fun value5(): Int? = userId

    override fun value1(value: Int?): PostRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): PostRecord {
        this.title = value
        return this
    }

    override fun value3(value: String?): PostRecord {
        this.body = value
        return this
    }

    override fun value4(value: LocalDateTime?): PostRecord {
        this.publishedDate = value
        return this
    }

    override fun value5(value: Int?): PostRecord {
        this.userId = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: LocalDateTime?, value5: Int?): PostRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised PostRecord
     */
    constructor(id: Int? = null, title: String? = null, body: String? = null, publishedDate: LocalDateTime? = null, userId: Int? = null): this() {
        this.id = id
        this.title = title
        this.body = body
        this.publishedDate = publishedDate
        this.userId = userId
    }
}
