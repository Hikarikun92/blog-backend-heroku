/*
 * This file is generated by jOOQ.
 */
package br.hikarikun92.blogbackendheroku.persistence.jooq.tables.records


import br.hikarikun92.blogbackendheroku.persistence.jooq.tables.User

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRecord() : UpdatableRecordImpl<UserRecord>(User.USER), Record2<Int?, String?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var username: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>
    override fun valuesRow(): Row2<Int?, String?> = super.valuesRow() as Row2<Int?, String?>
    override fun field1(): Field<Int?> = User.USER.ID
    override fun field2(): Field<String?> = User.USER.USERNAME
    override fun component1(): Int? = id
    override fun component2(): String? = username
    override fun value1(): Int? = id
    override fun value2(): String? = username

    override fun value1(value: Int?): UserRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): UserRecord {
        this.username = value
        return this
    }

    override fun values(value1: Int?, value2: String?): UserRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(id: Int? = null, username: String? = null): this() {
        this.id = id
        this.username = username
    }
}
