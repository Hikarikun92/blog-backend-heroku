/*
 * This file is generated by jOOQ.
 */
package br.hikarikun92.blogbackendheroku.persistence.jooq.tables.records


import br.hikarikun92.blogbackendheroku.persistence.jooq.tables.UserRoles

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRolesRecord() : TableRecordImpl<UserRolesRecord>(UserRoles.USER_ROLES), Record2<Int?, String?> {

    var userId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var roles: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>
    override fun valuesRow(): Row2<Int?, String?> = super.valuesRow() as Row2<Int?, String?>
    override fun field1(): Field<Int?> = UserRoles.USER_ROLES.USER_ID
    override fun field2(): Field<String?> = UserRoles.USER_ROLES.ROLES
    override fun component1(): Int? = userId
    override fun component2(): String? = roles
    override fun value1(): Int? = userId
    override fun value2(): String? = roles

    override fun value1(value: Int?): UserRolesRecord {
        this.userId = value
        return this
    }

    override fun value2(value: String?): UserRolesRecord {
        this.roles = value
        return this
    }

    override fun values(value1: Int?, value2: String?): UserRolesRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised UserRolesRecord
     */
    constructor(userId: Int? = null, roles: String? = null): this() {
        this.userId = userId
        this.roles = roles
    }
}
